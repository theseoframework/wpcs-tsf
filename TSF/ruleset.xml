<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="TSF" namespace="TSFCS\TSF" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>TSF Coding Standards</description>

	<rule ref="TSF.Performance.Opcodes"/>
	<rule ref="TSF.Performance.Functions">
		<exclude name="TSF.Performance.Functions.WordPressi18n"/>
		<exclude name="TSF.Performance.Functions.WordPressEscape"/>
	</rule>

	<config name="minimum_supported_wp_version" value="5.5"/>
	<config name="testVersion" value="7.4-"/>

	<rule ref="WordPress-Docs"/>
	<rule ref="WordPress-Extra"/>

	<rule ref="PHPCompatibilityWP"/>
	<rule ref="WordPress-Core">
		<!-- We don't require redundant PHP <5.4 support, nor do we limit depth. The UTF-8 failsafe for json_encode is edge-case on PHP<5.5 only. -->
		<exclude name="WordPress.WP.AlternativeFunctions.json_encode_json_encode"/>
		<exclude name="WordPress.WP.AlternativeFunctions.parse_url_parse_url"/>

		<!-- No. mt_rand() is perfectly fine. -->
		<exclude name="WordPress.WP.AlternativeFunctions.rand_mt_rand"/>

		<!-- Verify method signatures for compatibility with a few typical WP parent classes. -->
		<rule ref="WordPressVIPMinimum.Classes.DeclarationCompatibility"/>

		<!-- Verify that all functions which are hooked into a filter always return a value. -->
		<rule ref="WordPressVIPMinimum.Hooks.AlwaysReturnInFilter"/>

		<!-- Verify that some typical functions with mixed return types are not nested.
			This can prevent some TypeErrors and related deprecation notices. -->
		<rule ref="WordPressVIPMinimum.Security.EscapingVoidReturnFunctions"/>

		<!-- Verify that the correct escaping function is used based on the context. -->
		<rule ref="WordPressVIPMinimum.Security.ProperEscapingFunction"/>

		<!-- We don't need to clutter code. -->
		<exclude name="WordPress.Classes.ClassInstantiation.MissingParenthesis"/>
		<exclude name="PSR12.Classes.ClassInstantiation.MissingParentheses"/>

		<!-- Limiting rule is limiting. Learn elementary PHP instead... -->
		<exclude name="Squiz.Operators.ValidLogicalOperators"/>

		<!-- We don't always make full sentences. But when we do, we do this autonomously. -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

		<!-- Inline control structures greatly condense code, thus improving readability. This rule is bad. -->
		<exclude name="Generic.ControlStructures.InlineControlStructure"/>

		<!-- We support PHP 7.2+ now, not < 5.4 -->
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
		<!-- The semicolon is clutter, the short echo tag separates itself -->
		<exclude name="Squiz.PHP.EmbeddedPhp.ShortOpenEchoNoSemicolon"/>

		<!-- We do not rely on autofixes, so we can safely disable this redundant issue check. -->
		<exclude name="Universal.WhiteSpace.PrecisionAlignment"/>

		<!-- This rule conflicts with our use of ".class" -->
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>

		<!-- It's rare to assign variables to an anonymous class, let's not clutter code -->
		<exclude name="Universal.Classes.RequireAnonClassParentheses.Missing"/>

		<!-- TEMP - To condense code, we utilize these. When we move to PHP7, we might reimplement this. -->
		<exclude name="Squiz.PHP.DisallowMultipleAssignments"/>
		<!-- These two are related... -->
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>

		<!-- TEMP - Revisit this later. We don't add short descriptions for actions, filters, and properties. -->
		<exclude name="Generic.Commenting.DocComment.MissingShort"/>

		<!-- Asinine standard is radical. https://make.wordpress.org/core/2019/07/12/php-coding-standards-changes/ -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<!-- WordPress doesn't like performance for some reason. -->
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>

		<!-- Only dillentanti believe this can be used incorrectly. -->
		<exclude name="Universal.Operators.DisallowShortTernary"/>

		<!-- This is already against the rules. However, methods and namespaced functions are allowed to have this; "it's publicly private" -->
		<exclude name="PSR2.Methods.MethodDeclaration.Underscore"/>

		<!-- We may want to look at this later. Mixing namespaces in the API file is helpful for legacy functions. -->
		<exclude name="Universal.Namespaces.OneDeclarationPerFile"/>
		<exclude name="Universal.Namespaces.DisallowCurlyBraceSyntax"/>
		<exclude name="Universal.Namespaces.DisallowDeclarationWithoutName"/>

		<!-- While noble, this can cause issues with named arguments. PHP relies on them interally, e.g., spl_autoload_register's "$class" -->
		<exclude name="Universal.NamingConventions.NoReservedKeywordParameterNames"/>

		<!-- Goto is bad when doing it Assembly-style (jumping through loops), but not outside in modern structure. Stop being numinous. -->
		<!-- Besides, PHP errors out when jumping through loops with goto -->
		<exclude name="Generic.PHP.DiscourageGoto"/>

		<!-- We deliberately do not adhere to this style when we separate a "scope," for we use "in the loop" and "custom query" -->
		<exclude name="Universal.ControlStructures.DisallowLonelyIf"/>

		<!-- This invokes when using a variable, noise. -->
		<exclude name="WordPress.WP.Capabilities.Undetermined"/>

		<!-- Doesn't matter. Noise. -->
		<exclude name="Universal.CodeAnalysis.StaticInFinalClass"/>
	</rule>

	<rule ref="Squiz.PHP.CommentedOutCode">
		<!-- Default is 35%. WP Extra makes it 40%, which is still low enough to be annoying. -->
		<properties>
			<property name="maxPercentage" type="int" value="45"/>
		</properties>
	</rule>

	<!-- Tweak file name notifications -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<!-- Disable inconsiderate, conflicting and redundant "class-" prepend on the filename check. Use folders and dots instead. -->
			<property name="strict_class_file_names" type="bool" value="0"/>
		</properties>
	</rule>
</ruleset>
