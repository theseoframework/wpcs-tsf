<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="TSF" namespace="TSFCS\TSF" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>TSF Coding Standards</description>

	<rule ref="TSF.Performance.Opcodes"/>
	<rule ref="TSF.Performance.Functions">
		<exclude name="TSF.Performance.Functions.WordPressi18n"/>
		<exclude name="TSF.Performance.Functions.WordPressEscape"/>
	</rule>

	<config name="minimum_supported_wp_version" value="5.5"/>
	<config name="testVersion" value="7.3-"/>

	<rule ref="WordPress-Docs"/>
	<rule ref="WordPress-Extra"/>

	<rule ref="VariableAnalysis">
		<properties>
			<!-- This removes a nag whenever we forward variables to require... -->
			<!-- Probably TEMP, for it is a bad practise not seeing other code. -->
			<property name="allowUnusedVariablesBeforeRequire" type="bool" value="1"/>
		</properties>
	</rule>

	<rule ref="PHPCompatibilityWP"/>
	<rule ref="WordPress-Core">
		<!-- We don't require redundant PHP <5.4 support, nor do we limit depth. The UTF-8 failsafe for json_encode is edge-case on PHP<5.5 only. -->
		<exclude name="WordPress.WP.AlternativeFunctions.json_encode_json_encode"/>
		<exclude name="WordPress.WP.AlternativeFunctions.parse_url_parse_url"/>

		<!-- No. mt_rand() is perfectly fine. -->
		<exclude name="WordPress.WP.AlternativeFunctions.rand_mt_rand"/>

		<!-- We don't need to clutter code. -->
		<exclude name="WordPress.Classes.ClassInstantiation.MissingParenthesis"/>

		<!-- Limiting rule is limiting. Learn elementary PHP instead... -->
		<exclude name="Squiz.Operators.ValidLogicalOperators"/>

		<!-- We don't always make full sentences. But when we do, we do this autonomously. -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

		<!-- Inline control structures greatly condense code, thus improving readability. This rule is bad. -->
		<exclude name="Generic.ControlStructures.InlineControlStructure"/>

		<!-- We support PHP 7.2+ now, not < 5.4 -->
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>

		<!-- We do not rely on autofixes, so we can safely disable this redundant issue check. -->
		<exclude name="WordPress.WhiteSpace.PrecisionAlignment"/>

		<!-- TEMP - To condense code, we utilize these. When we move to PHP7, we might reimplement this. -->
		<exclude name="Squiz.PHP.DisallowMultipleAssignments"/>
		<!-- These two are related... -->
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>

		<!-- TEMP - We derived our own standard of commenting by adding tokens, it's easier for me, but harder others. We'll fix this later. -->
		<exclude name="Squiz.Commenting.InlineComment.NoSpaceBefore"/>

		<!-- TEMP - Revisit this later. We don't add short descriptions for actions, filters, and properties. -->
		<exclude name="Generic.Commenting.DocComment.MissingShort"/>

		<!-- Asinine standard is radical. https://make.wordpress.org/core/2019/07/12/php-coding-standards-changes/ -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<!-- WordPress doesn't like performance for some reason. -->
		<exclude name="WordPress.PHP.DisallowShortTernary"/>

		<!-- This is already against the rules. However, methods and namespaced functions are allowed to have this; "it's publicly private" -->
		<exclude name="PSR2.Methods.MethodDeclaration.Underscore"/>

		<!-- Goto is bad when doing it Assembly-style (jumping through loops), but not outside in modern structure. Stop being numinous. -->
		<!-- Besides, PHP errors out when jumping through loops with goto -->
		<exclude name="Generic.PHP.DiscourageGoto"/>
	</rule>

	<rule ref="WordPress.Security.EscapeOutput">
		<!-- TODO: Report issue that T_THIS should be ignored when there's a pointer attached.
			Now, I tried adding: "if ( '$this' === $this->tokens[ $i ]['content'] ) return;"
			... It turns out that there's absolutely no method support for this rule.
		-->
		<properties>
			<!-- Custom list of functions which escape values for output. -->
			<!-- sanitize_key is more effective than most escaping functions... -->
			<property name="customEscapingFunctions" type="array" value="sanitize_key"/>
			<!-- Custom list of functions whose return values are pre-escaped for output. Doesn't work, as we need $this... -->
			<!-- see https://github.com/WordPress/WordPress-Coding-Standards/issues/1766 -->
			<!-- <property name="customAutoEscapedFunctions" type="array" value="description,attention,code_wrap,get_social_image_uploader_form,make_single_select_form,get_generated_seo_bar"/> -->
			<!-- Custom list of functions which print output incorporating the passed values. -->
			<!-- <property name="customPrintingFunctions" type="array" value=""/> -->
		</properties>
	</rule>

	<rule ref="Squiz.PHP.CommentedOutCode">
		<!-- Default is 35%. WP Extra makes it 40%, which is still low enough to be annoying. -->
		<properties>
			<property name="maxPercentage" type="int" value="45"/>
		</properties>
	</rule>

	<!-- Tweak file name notifications -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<!-- Disable inconsiderate, conflicting and redundant "class-" prepend on the filename check. Use folders and dots instead. -->
			<property name="strict_class_file_names" type="bool" value="0"/>
		</properties>
	</rule>
</ruleset>
